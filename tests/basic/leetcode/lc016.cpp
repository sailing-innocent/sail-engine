/**
 * @file LeetCode 016
 * @author sailing-innocent
 * @date 2022-11-15
 * @brief the Three Sum
*/

#include "test_util.h"
#include <span>
#include <vector>

namespace sail::test {

int three_sum_closest(std::span<int> nums, int target) {
	int i = 0;
	int len = nums.size();
	int ret = target;
	int j = i + 1;
	int k = i + 2;
	int res_i = i;
	int res_j = j;
	int res_k = k;
	// sort the nums
	for (i = 0; i < len - 1; i++) {
		for (j = i + 1; j < len; j++) {
			if (nums[i] > nums[j]) {
				int temp = nums[i];
				nums[i] = nums[j];
				nums[j] = temp;
			}
		}
	}
	int gap = 1000000;

	i = 0;
	for (i = 0; i < len - 2; i++) {
		j = i + 1;
		k = len - 1;
		ret = target - nums[i];
		while (j < k) {
			int res = nums[j] + nums[k] - ret;
			if (res == 0) {
				return nums[j] + nums[k] + nums[i];
			}
			if (res > 0) {
				if (res < gap) {
					gap = res;
					res_i = i;
					res_j = j;
					res_k = k;
				}
				k = k - 1;
			} else {
				if (res + gap > 0) {
					gap = -res;
					res_i = i;
					res_j = j;
					res_k = k;
				}
				j = j + 1;
			}
		}
	}
	if (i < j && j < k) {
		ret = target - nums[i - 1];
		int res = nums[j] + nums[k] - ret;
		if (res > 0) {
			if (res < gap) {
				gap = res;
				res_i = i - 1;
				res_j = j;
				res_k = k;
			}
		} else {
			if (res + gap > 0) {
				gap = -res;
				res_i = i - 1;
				res_j = j;
				res_k = k;
			}
		}
	}

	return nums[res_i] + nums[res_j] + nums[res_k];
}

}// namespace sail::test

TEST_CASE("lc_016") {
	using namespace sail::test;
	std::vector<int> nums = {-1, 2, 1, -4};
	int res = three_sum_closest(nums, 1);
	REQUIRE(res == 2);
	nums = {1, 1, 1, 0};
	res = three_sum_closest(nums, 100);
	REQUIRE(res == 3);
	nums = {-43, 57, -71, 47, 3, 30, -85, 6, 60, -59, 0, -46, -40,
			-73, 53, 68, -82, -54, 88, 73, 20, -89, -22, 39, 55, -26,
			95, -87, -57, -86, 28, -37, 43, -27, -24, -88, -35, 82, -3,
			39, -85, -46, 37, 45, -24, 35, -49, -27, -96, 89, 87, -62,
			85, -44, 64, 78, 14, 59, -55, -10, 0, 98, 50, -75, 11,
			97, -72, 85, -68, -76, 44, -12, 76, 76, 8, -75, -64, -57,
			29, -24, 27, -3, -45, -87, 48, 10, -13, 17, 94, -85, 11,
			-42, -98, 89, 97, -66, 66, 88, -89, 90, -68, -62, -21, 2,
			37, -15, -13, -24, -23, 3, -58, -9, -71, 0, 37, -28, 22,
			52, -34, 24, -8, -20, 29, -98, 55, 4, 36, -3, -9, 98,
			-26, 17, 82, 23, 56, 54, 53, 51, -50, 0, -15, -50, 84,
			-90, 90, 72, -46, -96, -56, -76, -32, -8, -69, -32, -41, -56,
			69, -40, -25, -44, 49, -62, 36, -55, 41, 36, -60, 90, 37,
			13, 87, 66, -40, 40, -35, -11, 31, -45, -62, 92, 96, 8,
			-4, -50, 87, -17, -64, 95, -89, 68, -51, -40, -85, 15, 50,
			-15, 0, -67, -55, 45, 11, -80, -45, -10, -8, 90, -23, -41,
			80, 19, 29, 7};
	res = three_sum_closest(nums, 255);
	REQUIRE(res == 255);
	nums = {-13, 592, -501, 770, -952, -675, 322, -829, -246, 657, 608,
			485, -112, 967, -30, 182, -969, 559, -286, -64, 24, 365,
			-158, 701, 535, -429, -217, 28, 948, -114, -536, -711, 693,
			23, -958, -283, -700, -672, 311, 314, -712, -594, -351, 658,
			747, 949, 70, 888, 166, 495, 244, -380, -654, 454, -281,
			-811, -168, -839, -106, 877, -216, 523, -234, -8, 289, -175,
			920, -237, -791, -976, -509, -4, -3, 298, -190, 194, -328,
			265, 150, 210, 285, -176, -646, -465, -97, -107, 668, 892,
			612, -54, -272, -910, 557, -212, -930, -198, 38, -365, -729,
			-410, 932, 4, -565, -329, -456, 224, 443, -529, -428, -294,
			191, 229, 112, -867, -163, -979, 236, -227, -388, -209, 984,
			188, -549, 970, 951, -119, -146, 801, -554, 564, -769, 334,
			-819, -356, -724, -219, 527, -405, -27, -759, 722, -774, 758,
			394, 146, 517, 870, -208, 742, -782, 336, -364, -558, -417,
			663, -914, 536, 293, -818, 847, -322, 408, 876, -823, 827,
			167};
	res = three_sum_closest(nums, 7175);
	REQUIRE(res == 2921);
	nums = {833, 736, 953, -584, -448, 207, 128, -445, 126, 248, 871,
			860, 333, -899, 463, 488, -50, -331, 903, 575, 265, 162,
			-733, 648, 678, 549, 579, -172, -897, 562, -503, -508, 858,
			259, -347, -162, -505, -694, 300, -40, -147, 383, -221, -28,
			-699, 36, -229, 960, 317, -585, 879, 406, 2, 409, -393,
			-934, 67, 71, -312, 787, 161, 514, 865, 60, 555, 843,
			-725, -966, -352, 862, 821, 803, -835, -635, 476, -704, -78,
			393, 212, 767, -833, 543, 923, -993, 274, -839, 389, 447,
			741, 999, -87, 599, -349, -515, -553, -14, -421, -294, -204,
			-713, 497, 168, 337, -345, -948, 145, 625, 901, 34, -306,
			-546, -536, 332, -467, -729, 229, -170, -915, 407, 450, 159,
			-385, 163, -420, 58, 869, 308, -494, 367, -33, 205, -823,
			-869, 478, -238, -375, 352, 113, -741, -970, -990, 802, -173,
			-977, 464, -801, -408, -77, 694, -58, -796, -599, -918, 643,
			-651, -555, 864, -274, 534, 211, -910, 815, -102, 24, -461,
			-146};
	res = three_sum_closest(nums, -7111);
	REQUIRE(res == -2960);
}